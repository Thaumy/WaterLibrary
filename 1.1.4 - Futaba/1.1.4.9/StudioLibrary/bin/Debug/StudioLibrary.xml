<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudioLibrary</name>
    </assembly>
    <members>
        <member name="P:jarwUnit.pilipala.IPalaRoot.dataBase">
            <summary>
            Pala数据表所在数据库
            </summary>
        </member>
        <member name="P:jarwUnit.pilipala.IPalaRoot.Tables">
            <summary>
            文本表
            </summary>
        </member>
        <member name="P:jarwUnit.pilipala.IPalaRoot.Views">
            <summary>
            文本视图
            </summary>
        </member>
        <member name="P:jarwUnit.pilipala.IPalaRoot.MySqlConnH">
            <summary>
            数据库管理器实例
            </summary>
        </member>
        <member name="T:jarwUnit.pilipala.PalaRoot">
            <summary>
            啪啦权限控制器
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.#ctor(System.Int32,LibStructs.PalaDB)">
            <summary>
            初始化PalaRoot
            </summary>
            <param name="root_id">权限ID</param>
            <param name="PalaDB">啪啦数据库信息</param>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.getRoot">
            <summary>
            获得权限数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:jarwUnit.pilipala.PalaRoot.dftTables">
            <summary>
            默认pala数据表
            </summary>
        </member>
        <member name="T:jarwUnit.pilipala.PalaRoot.dftViews">
            <summary>
            默认pala数据视图
            </summary>
        </member>
        <member name="T:jarwUnit.pilipala.PalaRoot.Tables">
            <summary>
            自定义pala数据表
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.Tables.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化表名结构
            </summary>
            <param name="root"></param>
            <param name="text_index"></param>
            <param name="text_main"></param>
            <param name="text_sub"></param>
        </member>
        <member name="T:jarwUnit.pilipala.PalaRoot.Views">
            <summary>
            自定义pala数据视图
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.Views.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化视图名结构
            </summary>
            <param name="text_main"></param>
            <param name="text_sub"></param>
            <param name="text_index_post"></param>
            <param name="text_index_page"></param>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.defaultTables(jarwUnit.pilipala.PalaRoot.Tables@)">
            <summary>
            以默认值定义表名（重载一::直接更改Tables）
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.defaultViews(jarwUnit.pilipala.PalaRoot.Views@)">
            <summary>
            以默认值定义视图名（重载一::直接更改Views）
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.defaultTables">
            <summary>
            以默认值定义表名（重载二::返回默认Tables）
            </summary>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.PalaRoot.defaultViews">
            <summary>
            以默认值定义视图名（重载二::返回默认Views）
            </summary>
            <returns></returns>
        </member>
        <member name="T:jarwUnit.pilipala.UI.ITextListH">
            <summary>
            文本列表控制接口
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextListH.getTextList">
            <summary>
            获得文本索引表（重载一::得到全文本列表）
            </summary>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextListH.getTextList(System.String)">
            <summary>
            获得文本索引表（重载二::得到指定类型的文本列表）
            </summary>
            <param name="text_type">自定义文本类型</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextListH.stepTextList(System.Int32,System.Int32)">
            <summary>
            步进式获得文本索引表（重载一::得到全文本列表）
            </summary>
            <param name="row">步进起始行（包含该行）</param>
            <param name="rowLength">加载行数</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextListH.stepTextList(System.Int32,System.Int32,System.String)">
            <summary>
            步进式获得文本索引表（重载一::得到指定类型的文本列表）
            </summary>
            <param name="row">步进起始行（包含该行）</param>
            <param name="rowLength">加载行数</param>
            <param name="text_type">自定义文本类型</param>
            <returns></returns>
        </member>
        <member name="T:jarwUnit.pilipala.UI.ITextH">
            <summary>
            文本控制接口
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextH.getTextMain(System.Int32)">
            <summary>
            获得指定ID的文本主表行
            </summary>
            <param name="text_id">文本ID</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextH.getTextSub(System.Int32)">
            <summary>
            获得指定ID的文本副表行
            </summary>
            <param name="text_id">文本ID</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.ITextH.rdmTextIndex(System.Int32,System.String)">
            <summary>
            随机获得文本索引表行
            </summary>
            <param name="excluded_text_id">不参与随机操作的文本ID</param>
            <param name="text_type">自定义文本类型</param>
            <returns></returns>
        </member>
        <member name="T:jarwUnit.pilipala.UI.TextListH">
            <summary>
            文本列表控制器
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.UI.TextListH.#ctor(LibStructs.PalaDB)">
            <summary>
            初始化TextListH
            </summary>
            <param name="PalaDB">啪啦数据库信息</param>
        </member>
        <member name="T:jarwUnit.pilipala.UI.TextH">
            <summary>
            文本控制器
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.UI.TextH.#ctor(LibStructs.PalaDB)">
            <summary>
            初始化TextH
            </summary>
            <param name="PalaDB">啪啦数据库信息</param>
        </member>
        <member name="M:jarwUnit.pilipala.UI.TextH.fill(LibStructs.PaText,LibStructs.PaText)">
            <summary>
            合并主副表PaText数据
            </summary>
            <param name="TextMain">主表PaText</param>
            <param name="TextSub">副表PaText</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.TextH.update_count_pv(System.Int32,System.Int32)">
            <summary>
            设置count_pv
            </summary>
            <param name="text_id">文本ID</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:jarwUnit.pilipala.UI.TextH.update_count_like(System.Int32,System.Int32)">
            <summary>
            设置count_like
            </summary>
            <param name="text_id">文本ID</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:jarwUnit.pilipala.CookieHandler">
            <summary>
            Cookie控制器
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.isCookiesExist(System.String)">
            <summary>
            判断Cookie对象是否存在
            </summary>
            <param name="CookieName">被判断Cookie对象的名称</param>
            <returns>存在返回true，反之false</returns>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.isCookiesExist(System.String,System.String)">
            <summary>
            判断Cookie对象是否存在（重载二：判断索引是否存在）
            </summary>
            <param name="CookieName">被判断Cookie对象的名称</param>
            <param name="keyName">索引名，属于被判断的Cookie</param>
            <returns>存在返回true，反之false</returns>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.cookie``1(System.String)">
            <summary>
            读取Cookie对象到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="CookieName">被读取Cookie对象名</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.cookie``1(System.String,System.String)">
            <summary>
            读取Cookie对象的指定索引值到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="CookieName">被读取Cookie对象名</param>
            <param name="keyName">索引名，属于当前Cookie对象</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.setCookie(System.String,System.Object)">
            <summary>
            设置Cookie值
            </summary>
            <param name="CookieName">Cookie名，承担该操作</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="M:jarwUnit.pilipala.CookieHandler.setCookie(System.String,System.String,System.Object)">
            <summary>
            设置Cookie值（重载二：索引设置）
            </summary>
            <param name="CookieName">Cookie名，承担该操作</param>
            <param name="keyName">索引名，属于承担该操作的Cookie</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="T:jarwUnit.pilipala.SessionHandler">
            <summary>
            Session控制器
            </summary>
        </member>
        <member name="M:jarwUnit.pilipala.SessionHandler.session``1(System.String)">
            <summary>
            读取Session对象到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="varName">变量名，属于Session对象，承担该操作</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:jarwUnit.pilipala.SessionHandler.setSession(System.String,System.Object)">
            <summary>
            设置Session对象的变量值
            </summary>
            <param name="varName">变量名，属于Session对象，承担该操作</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="T:LibFrame.IStdLibFrame">
            <summary>
            版本控制限定
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.targetFramework">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.targetFrameworkMoniker">
            <summary>
            目标框架名字对象
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.compat">
            <summary>
            对最近一次pub版本的全局兼容性
            </summary>
        </member>
        <member name="P:LibFrame.IStdLibFrame.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="T:LibFrame.LibInformation">
            <summary>
            用于获取类库信息的类
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.targetCSharpLang">
            <summary>
            类库的目标C#版本
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.newVerDownloadURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.thisVerDownloadURL">
            <summary>
            当前版本下载URL
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.HlinfURL">
            <summary>
            内置于当前版本的Hlinf信息获取URL
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.logo">
            <summary>
            获取到像素化的StdLib_logo
            </summary>
        </member>
        <member name="M:LibFrame.LibInformation.#ctor(System.String)">
            <summary>
            初始化LibInformation
            </summary>
            <param name="spareInfUrl">必须的值：用于内置联网信息获取Url失效时进行替补的Url</param>
        </member>
        <member name="T:LibFrame.LibInformation.OWebClient">
            <summary>
            被重写的WebClient
            </summary>
        </member>
        <member name="P:LibFrame.LibInformation.OWebClient.timeOut">
            <summary>
            WebRequest请求访问的超时时间
            </summary>
        </member>
        <member name="M:LibFrame.LibInformation.OWebClient.GetWebRequest(System.Uri)">
            <summary>
            得到WebRwquest请求实例并附加超时时间的方法
            </summary>
            <param name="uri">统一资源标识符对象</param>
            <returns>返回WebRequests实例(注意！该部分代码尚不安全，因为它没有建立报错处理机制)</returns>
        </member>
        <member name="M:LibFrame.LibInformation.getStreamReader(System.String)">
            <summary>
            获取url指定的OWebClient所赋值的StreamReader对象（重载一）（UTF8编码模式）
            </summary>
            <param name="url">被OWebClient指定的url</param>
            <returns>返回StreamReader，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibInformation.getStreamReader(System.String,System.String)">
            <summary>
            获取url指定的OWebClient所赋值的StreamReader对象（重载二）
            </summary>
            <param name="url">被OWebClient指定的url</param>
            <param name="encodingType">使用的编码模式</param>
            <returns>返回StreamReader，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibInformation.pvtGetHtmlLibInformation">
            <summary>
            获取联网信息
            （注意：一旦取到空值，该方法将自动返回自定义URL所取得的信息（重载二被执行））
            </summary>
            <returns>返回获得的信息，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibInformation.pvtGetHtmlLibInformation(System.String)">
            <summary>
            获取联网信息（重载二）
            </summary>
            <param name="url">信息所在的URL地址</param>
            <returns>返回获得的信息，报错返回“string[] { "null", "null" }”数组</returns>
        </member>
        <member name="M:LibFrame.LibInformation.getJsonLibInformation(System.String)">
             <summary>
             通过json文件获得类库信息（重载一）
             </summary>
            <param name="url">json文件所在url</param>
             <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="M:LibFrame.LibInformation.getJsonLibInformation(System.String,System.Int32,System.Boolean)">
            <summary>
            通过json文件获得类库信息（重载二）
            </summary>
            <param name="filePath">json文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="T:StudioLibrary.LibReso">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:StudioLibrary.LibReso.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:StudioLibrary.LibReso.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:StudioLibrary.LibReso.logo">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:LibStructs.ConnSign">
            <summary>
            连接签名（用于描述数据库连接的基本信息）
            </summary>
        </member>
        <member name="P:LibStructs.ConnSign.dataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:LibStructs.ConnSign.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:LibStructs.ConnSign.user">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:LibStructs.ConnSign.password">
            <summary>
            用户名对应的密码
            </summary>
        </member>
        <member name="T:LibStructs.XmlSign">
            <summary>
            XML描述结构
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.path">
            <summary>
            节点地址，如父节点、实节点、子节点的地址，用于XmlCreater类中除reStream、CreateXml方法外的所有方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.fileName">
            <summary>
            被创建的Xml文档的文件地址，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.xmlName">
            <summary>
            被创建的Xml文档的文件名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.rootName">
            <summary>
            被创建的Xml文档的根元素名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.nodeName">
            <summary>
            节点名，可表示子节点、父节点、新建空\实节点名，用于XmlCreater类的AddRealNode、AddEmptyNode、RemoveNode方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.attName">
            <summary>
            节点的属性名，用于XmlCreater类的AddRealNode、ReadAtt方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.attValue">
            <summary>
            节点的属性值，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.innerText">
            <summary>
            节点的子文本，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:LibStructs.XmlSign.type">
            <summary>
            读取类型，可选值有"_name"、"_value"，用于XmlCreater类的ReadNode方法
            </summary>
        </member>
        <member name="T:LibStructs.JlinfObject">
            <summary>
            Json本库信息
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.projectVer">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.architecture">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.developmentCode">
            <summary>
            开发代号
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.summary">
            <summary>
            版本概要
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:LibStructs.JlinfObject.newVerURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="T:LibStructs.Posi">
            <summary>
            查询位置
            </summary>
        </member>
        <member name="P:LibStructs.Posi.dataBase">
            <summary>
            被操作表所在数据库名
            </summary>
        </member>
        <member name="P:LibStructs.Posi.table">
            <summary>
            被操作表名
            </summary>
        </member>
        <member name="P:LibStructs.Posi.whereColumn">
            <summary>
            定位列的列名
            </summary>
        </member>
        <member name="P:LibStructs.Posi.targetColumn">
            <summary>
            目标列的列名，目标列承担读取/更改操作
            </summary>
        </member>
        <member name="T:LibStructs.Para">
            <summary>
            参数单元（用于参数化查询添加参数）
            </summary>
        </member>
        <member name="P:LibStructs.Para.paraName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:LibStructs.Para.paraValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:LibStructs.IPaTextIndex">
            <summary>
            索引表数据接口
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextIndex.text_id">
            <summary>
            文本索引
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextIndex.text_mode">
            <summary>
            文本模式
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextIndex.text_type">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="T:LibStructs.IPaTextMain">
            <summary>
            主表数据接口
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextMain.text_title">
            <summary>
            文本标题
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextMain.text_summary">
            <summary>
            文本概要
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextMain.text_content">
            <summary>
            文本正文
            </summary>
        </member>
        <member name="T:LibStructs.IPaTextSub">
            <summary>
            副表数据接口
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.text_class">
            <summary>
            文本归类
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.text_editor">
            <summary>
            文本作者
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.date_created">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.date_changed">
            <summary>
            变更日期
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.count_pv">
            <summary>
            浏览计数
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.count_comment">
            <summary>
            评论计数
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.count_like">
            <summary>
            点赞计数
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.tags">
            <summary>
            标签集合
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.cover_url">
            <summary>
            封面链接
            </summary>
        </member>
        <member name="P:LibStructs.IPaTextSub.strip_color">
            <summary>
            条带颜色
            </summary>
        </member>
        <member name="T:LibStructs.PaText">
            <summary>
            啪啦文本数据
            </summary>
        </member>
        <member name="T:LibStructs.IPaRoot">
            <summary>
            权限数据接口
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.root_id">
            <summary>
            权限ID
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.root_definer">
            <summary>
            权限定义者
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.site_debug">
            <summary>
            站点开发者模式状态
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.site_access">
            <summary>
            站点可用（该值用于关闭站点）
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.site_url">
            <summary>
            站点URL
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.site_title">
            <summary>
            站点标题
            </summary>
        </member>
        <member name="P:LibStructs.IPaRoot.site_summary">
            <summary>
            站点概要
            </summary>
        </member>
        <member name="T:LibStructs.PaRoot">
            <summary>
            权限数据
            </summary>
        </member>
        <member name="T:LibStructs.PalaDB">
            <summary>
            啪啦数据库信息
            </summary>
        </member>
        <member name="P:LibStructs.PalaDB.dataBase">
            <summary>
            Pala数据表所在数据库
            </summary>
        </member>
        <member name="P:LibStructs.PalaDB.Tables">
            <summary>
            文本表
            </summary>
        </member>
        <member name="P:LibStructs.PalaDB.Views">
            <summary>
            文本视图
            </summary>
        </member>
        <member name="P:LibStructs.PalaDB.MySqlConnH">
            <summary>
            数据库管理器实例
            </summary>
        </member>
        <member name="T:sansuUnit.Encryptor">
            <summary>
            加密算法
            </summary>
        </member>
        <member name="M:sansuUnit.Encryptor.md5(System.String)">
            <summary>
            MD5方法
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>通常返回MD5加密结果，报错则返回错误信息</returns>
        </member>
        <member name="M:sansuUnit.Encryptor.hash(System.String)">
            <summary>
            散列方法
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>通常返回散列加密结果，报错则返回错误信息</returns>
        </member>
        <member name="T:sansuUnit.Sorter">
            <summary>
            排序算法
            </summary>
        </member>
        <member name="M:sansuUnit.Sorter.exch(System.Int32@,System.Int32@)">
            <summary>
            交换值的方法，引用类型
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:sansuUnit.Sorter.less(System.Int32,System.Int32)">
            <summary>
            比较大小的方法
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:sansuUnit.Sorter.easySort``1(``0[])">
            <summary>
            冒泡排序
            </summary>
            <param name="array">被排序的数组</param>
            <returns>通常返回有序数组(由小到大)，报错则返回null</returns>
        </member>
        <member name="M:sansuUnit.Sorter.shellSort(System.Int32[])">
            <summary>
            希尔排序
            </summary>
            <param name="array">待排序的整数组</param>
            <returns>返回排序完成的数组</returns>
        </member>
        <member name="T:sansuUnit.Searcher">
            <summary>
            检索类算法
            </summary>
        </member>
        <member name="M:sansuUnit.Searcher.binarySearch(System.Int32,System.Int32[])">
            <summary>
            二分法检索(重载一),适用于整型检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组,顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="M:sansuUnit.Searcher.binarySearch(System.Double,System.Double[])">
            <summary>
            二分法检索(重载二),适用于双精度浮点检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组，顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="T:sukiUnit.FileHandler">
            <summary>
            文件控制器
            </summary>
        </member>
        <member name="M:sukiUnit.FileHandler.fileToStr(System.String)">
            <summary>
            以字符串形式输出文件（重载一）（UTF8编码模式）
            </summary>
            <param name="url">文件所在的本地网络路径</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:sukiUnit.FileHandler.fileToStr(System.String,System.String)">
            <summary>
            以字符串形式输出文件（重载二）
            </summary>
            <param name="url">文件所在的本地网络路径</param>
            /// <param name="encodingType">解析文件所用的编码模式</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:sukiUnit.FileHandler.fileToStr(System.String,System.Int32,System.Boolean)">
            <summary>
            以字符串形式输出文件（重载三）（UTF8编码模式）
            </summary>
            <param name="filePath">文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:sukiUnit.FileHandler.fileToStr(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            以字符串形式输出文件（重载四）
            </summary>
            <param name="filePath">文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <param name="encodingType">解析文件所用的编码模式</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:sukiUnit.XmlHandler">
            <summary>
            XML文件读写类
            </summary>
        </member>
        <member name="M:sukiUnit.XmlHandler.reStream(System.String)">
            <summary>
            指定流的方法
            </summary>
            <param name="xStream">文件流地址</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.createXml(System.String,System.String,System.String)">
            <summary>
            创建Xml文档的方法（重载一）
            </summary>
            <param name="fileName">Xml文档被创建的目录</param>
            <param name="xmlName">Xml文档名</param>
            <param name="rootName">根节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.createXml(LibStructs.XmlSign)">
            <summary>
            创建Xml文档的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.addRealNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加实节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的节点名</param>
            <param name="attName">节点的属性</param>
            <param name="attValue">节点的属性值</param>
            <param name="innerText">节点的子文本</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.addRealNode(LibStructs.XmlSign)">
            <summary>
            添加实节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.addEmptyNode(System.String,System.String)">
            <summary>
            添加空节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的空节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.addEmptyNode(LibStructs.XmlSign)">
            <summary>
            添加空节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.removeNode(System.String,System.String)">
            <summary>
            删除被指定的父节点下子节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">被删的子节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.removeNode(LibStructs.XmlSign)">
            <summary>
            删除被指定的父节点下子节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.readInformation(System.String,System.String)">
            <summary>
            读取被指定的实节点的信息的方法（重载一）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="type">被读取的信息类型</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.readInformation(LibStructs.XmlSign)">
            <summary>
            读取被指定的实节点的信息的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.readAttribute(System.String,System.String)">
            <summary>
            读取被指定的实节点的属性值的方法（重载一）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="attName">被读值的属性名</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="M:sukiUnit.XmlHandler.readAttribute(LibStructs.XmlSign)">
            <summary>
            读取被指定的实节点的属性值的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="T:sukiUnit.MySqlConnH">
            <summary>
            MySql数据库管理器
            </summary>
        </member>
        <member name="M:sukiUnit.MySqlConnH.closeHConnection">
            <summary>
            close主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.disposeHConnection">
            <summary>
            dispose主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.nullHConnection">
            <summary>
            将主连接设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.restartHConnection">
            <summary>
            重启主连接（须以主连接定义完成为前提）
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.disposeHCommand">
            <summary>
            dispose主命令行
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.nullHCommand">
            <summary>
            将主命令行设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.setHCommand(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            设置主命令行的sql语句（重载一）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="MySqlConnection">要求主命令行执行的MySqlConnection连接实例</param>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.setHCommand(System.String)">
            <summary>
            设置主命令行的sql语句（重载二：HConnection介入）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.start(System.String,System.String,System.String,System.String)">
            <summary>
            启动连接（重载一：HConnection介入）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回true，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.start(LibStructs.ConnSign)">
            <summary>
            启动连接（重载二：HConnection介入）
            </summary>
            <param name="ConnSign">连接签名</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.start(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            启动连接（重载三）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            获得数据行（重载一）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获得数据行（重载二）（适用于参数化查询）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getRow(System.String)">
            <summary>
            获得数据行（重载三：HConnection介入）
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获得数据行（重载四：HConnection介入）（适用于参数化查询）
            </summary>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回查询结果</returns>
            
        </member>
        <member name="M:sukiUnit.MySqlConnH.getRow(System.Data.DataTable,System.String,System.Object)">
            <summary>
            获得数据行（重载五：通过键值匹配，从数据表中获取数据行）
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="keyName">键名</param>
            <param name="keyValue">键值</param>
            <returns>返回获得的DataRow数据行实例，未检索到返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getConnection(System.String,System.String,System.String,System.String)">
            <summary>
            抛出一个MySql连接（重载一）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getConnection(LibStructs.ConnSign)">
            <summary>
            抛出一个MySql连接（重载二）
            </summary>
            <param name="ConnSign">连接签名</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            获取一张数据表（重载一）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获取一张数据表（重载二）（适用于参数化查询）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getTable(System.String)">
            <summary>
            获取一张数据表（重载三：HConnection介入）
            </summary>
            <param name="sql">SQL语句，用于查询数据表</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获取一张数据表（重载四：HConnection介入）（适用于参数化查询）
            </summary>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getColumn(System.Data.DataTable,System.String)">
            <summary>
            从数据表中提取取数据列
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="columnName">列名</param>
            <returns>返回非泛型List{object}实例，错误则返回null</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.setColumnValue(MySql.Data.MySqlClient.MySqlConnection,LibStructs.Posi,System.String,System.String)">
            <summary>
            设置(替换)一个行的列值（字符串匹配）
            </summary>
            <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
            <param name="locateStr">用于定位行和列的结构体</param>
            <param name="whereColumnValue">定位列的列值</param>
            <param name="targetColumnValue">被改列的改值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.setColumnValue(LibStructs.Posi,System.String,System.String)">
            <summary>
            设置(替换)一个行的列值（重载二：HConnection介入）（字符串匹配）
            </summary>
            <param name="locateStr">用于定位行和列的结构体</param>
            <param name="whereColumnValue">定位列的列值</param>
            <param name="targetColumnValue">被改列的改值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getColumnValue(MySql.Data.MySqlClient.MySqlConnection,LibStructs.Posi,System.String)">
            <summary>
            获得一个行的列值（字符串匹配）（重载一）,如果查询到多个行，则只返回第一行的数据
            </summary>
            <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
            <param name="locateStr">用于定位行和列的结构体</param>
            <param name="whereColumnValue">定位列的列值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.getColumnValue(LibStructs.Posi,System.String)">
            <summary>
            获得一个行的列值（字符串匹配）（重载二：HConnection介入）,如果查询到多个行，则只返回第一行的数据
            </summary>
            <param name="locateStr">用于定位行和列的结构体</param>
            <param name="whereColumnValue">定位列的列值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:sukiUnit.MySqlConnH.paraQueryCmd(System.String,System.Collections.Generic.List{LibStructs.Para})">
            <summary>
            建立参数化查询cmd对象
            </summary>
            <param name="sql">携带查询参数的SQL语句</param>
            <param name="paraList">查询参数列表</param>
            <returns>返回建立的参数化查询cmd对象</returns>
        </member>
    </members>
</doc>
