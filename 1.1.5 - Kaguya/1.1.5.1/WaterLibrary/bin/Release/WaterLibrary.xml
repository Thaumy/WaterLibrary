<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaterLibrary</name>
    </assembly>
    <members>
        <member name="T:LibStruct.Interface.IPaTextIndex">
            <summary>
            索引表数据接口
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextIndex.text_id">
            <summary>
            文本索引
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextIndex.text_mode">
            <summary>
            文本模式
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextIndex.text_type">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="T:LibStruct.Interface.IPaTextMain">
            <summary>
            主表数据接口
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextMain.text_title">
            <summary>
            文本标题
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextMain.text_summary">
            <summary>
            文本概要
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextMain.text_content">
            <summary>
            文本正文
            </summary>
        </member>
        <member name="T:LibStruct.Interface.IPaTextSub">
            <summary>
            副表数据接口
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.text_archiv">
            <summary>
            文本归档
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.text_editor">
            <summary>
            文本作者
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.date_created">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.date_changed">
            <summary>
            变更日期
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.count_pv">
            <summary>
            浏览计数
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.count_comment">
            <summary>
            评论计数
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.count_star">
            <summary>
            星星计数
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.tags">
            <summary>
            标签集合
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaTextSub.before_html">
            <summary>
            封面链接
            </summary>
        </member>
        <member name="T:LibStruct.Interface.IPaUser">
            <summary>
            用户数据接口
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.root_id">
            <summary>
            权限ID
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.root_definer">
            <summary>
            权限定义者
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.site_debug">
            <summary>
            站点开发者模式状态
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.site_access">
            <summary>
            站点可用（该值用于关闭站点）
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.site_url">
            <summary>
            站点URL
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.site_title">
            <summary>
            站点标题
            </summary>
        </member>
        <member name="P:LibStruct.Interface.IPaUser.site_summary">
            <summary>
            站点概要
            </summary>
        </member>
        <member name="T:LibStruct.Interface.ITextBasic">
            <summary>
            文本基本数据接口
            </summary>
        </member>
        <member name="P:LibStruct.Interface.ITextBasic.text_id">
            <summary>
            文本序列号
            </summary>
        </member>
        <member name="P:LibStruct.Interface.ITextBasic.innerText">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:LibStruct.JlinfObject">
            <summary>
            Json本库信息
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.projectVer">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.architecture">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.developmentCode">
            <summary>
            开发代号
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.summary">
            <summary>
            版本概要
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:LibStruct.JlinfObject.newVerURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="T:LibStruct.XmlSign">
            <summary>
            XML描述结构
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.path">
            <summary>
            节点地址，如父节点、实节点、子节点的地址，用于XmlCreater类中除reStream、CreateXml方法外的所有方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.fileName">
            <summary>
            被创建的Xml文档的文件地址，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.xmlName">
            <summary>
            被创建的Xml文档的文件名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.rootName">
            <summary>
            被创建的Xml文档的根元素名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.nodeName">
            <summary>
            节点名，可表示子节点、父节点、新建空\实节点名，用于XmlCreater类的AddRealNode、AddEmptyNode、RemoveNode方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.attName">
            <summary>
            节点的属性名，用于XmlCreater类的AddRealNode、ReadAtt方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.attValue">
            <summary>
            节点的属性值，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.innerText">
            <summary>
            节点的子文本，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:LibStruct.XmlSign.type">
            <summary>
            读取类型，可选值有"_name"、"_value"，用于XmlCreater类的ReadNode方法
            </summary>
        </member>
        <member name="T:LibStruct.MySql.mysqlKey">
            <summary>
            键（用于键匹配查询）
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlKey.dataBase">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlKey.table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlKey.primaryKeyName">
            <summary>
            主键名
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlKey.primaryKeyValue">
            <summary>
            主键值
            </summary>
        </member>
        <member name="T:LibStruct.MySql.mysqlConn">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlConn.dataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlConn.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlConn.user">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlConn.password">
            <summary>
            用户名对应的密码
            </summary>
        </member>
        <member name="T:LibStruct.MySql.mysqlParm">
            <summary>
            参数（用于参数化查询添加参数）
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlParm.parmName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:LibStruct.MySql.mysqlParm.parmValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.PaText">
            <summary>
            啪啦文本数据
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_id">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_type">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_title">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_summary">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_content">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_archiv">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.text_editor">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.date_created">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.date_changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.count_pv">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.count_comment">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.count_star">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.tags">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaText.before_html">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.PaUser">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.root_id">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.root_definer">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.site_debug">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.site_access">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.site_url">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.site_title">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaUser.site_summary">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.PaDB">
            <summary>
            啪啦数据库信息
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaDB.dataBase">
            <summary>
            Pala数据表所在数据库
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaDB.Tables">
            <summary>
            文本表
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaDB.Views">
            <summary>
            文本视图
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.PaDB.MySqlConnH">
            <summary>
            数据库管理器实例
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.TextTitle">
            <summary>
            分立文章标题
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextTitle.text_id">
            <summary>
            文本序列号
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextTitle.innerText">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.TextSummary">
            <summary>
            分立文章概要
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextSummary.text_id">
            <summary>
            文本序列号
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextSummary.innerText">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:LibStruct.pilipala.TextContent">
            <summary>
            分立文章内容
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextContent.text_id">
            <summary>
            文本序列号
            </summary>
        </member>
        <member name="P:LibStruct.pilipala.TextContent.innerText">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:LibFrame.ILibFrameInfo">
            <summary>
            版本控制限定
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.targetFramework">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.targetFrameworkMoniker">
            <summary>
            目标框架名字对象
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.compat">
            <summary>
            对最近一次pub版本的全局兼容性
            </summary>
        </member>
        <member name="P:LibFrame.ILibFrameInfo.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="T:LibFrame.LibFrameInfo">
            <summary>
            用于获取类库框架信息的类
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.targetCSharpLang">
            <summary>
            类库的目标C#版本
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.newVerDownloadURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.thisVerDownloadURL">
            <summary>
            当前版本下载URL
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.HlinfURL">
            <summary>
            内置于当前版本的Hlinf信息获取URL
            </summary>
        </member>
        <member name="M:LibFrame.LibFrameInfo.#ctor(System.String)">
            <summary>
            初始化LibInformation
            </summary>
            <param name="spareInfUrl">必须的值：用于内置联网信息获取Url失效时进行替补的Url</param>
        </member>
        <member name="T:LibFrame.LibFrameInfo.OWebClient">
            <summary>
            被重写的WebClient
            </summary>
        </member>
        <member name="P:LibFrame.LibFrameInfo.OWebClient.timeOut">
            <summary>
            WebRequest请求访问的超时时间
            </summary>
        </member>
        <member name="M:LibFrame.LibFrameInfo.OWebClient.GetWebRequest(System.Uri)">
            <summary>
            得到WebRwquest请求实例并附加超时时间的方法
            </summary>
            <param name="uri">统一资源标识符对象</param>
            <returns>返回WebRequests实例(注意！该部分代码尚不安全，因为它没有建立报错处理机制)</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.getStreamReader(System.String)">
            <summary>
            获取url指定的OWebClient所赋值的StreamReader对象（重载一）（UTF8编码模式）
            </summary>
            <param name="url">被OWebClient指定的url</param>
            <returns>返回StreamReader，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.getStreamReader(System.String,System.String)">
            <summary>
            获取url指定的OWebClient所赋值的StreamReader对象（重载二）
            </summary>
            <param name="url">被OWebClient指定的url</param>
            <param name="encodingType">使用的编码模式</param>
            <returns>返回StreamReader，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.pvtGetHtmlLibInformation">
            <summary>
            获取联网信息
            （注意：一旦取到空值，该方法将自动返回自定义URL所取得的信息（重载二被执行））
            </summary>
            <returns>返回获得的信息，报错返回null</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.pvtGetHtmlLibInformation(System.String)">
            <summary>
            获取联网信息（重载二）
            </summary>
            <param name="url">信息所在的URL地址</param>
            <returns>返回获得的信息，报错返回“string[] { "null", "null" }”数组</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.getJsonLibInformation(System.String)">
             <summary>
             通过json文件获得类库信息（重载一）
             </summary>
            <param name="url">json文件所在url</param>
             <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="M:LibFrame.LibFrameInfo.getJsonLibInformation(System.String,System.Int32,System.Boolean)">
            <summary>
            通过json文件获得类库信息（重载二）
            </summary>
            <param name="filePath">json文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="T:dataUnit.XmlH">
            <summary>
            xml管理器
            </summary>
        </member>
        <member name="M:dataUnit.XmlH.reStream(System.String)">
            <summary>
            指定流的方法
            </summary>
            <param name="xStream">文件流地址</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.createXml(System.String,System.String,System.String)">
            <summary>
            创建Xml文档的方法（重载一）
            </summary>
            <param name="fileName">Xml文档被创建的目录</param>
            <param name="xmlName">Xml文档名</param>
            <param name="rootName">根节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.createXml(LibStruct.XmlSign)">
            <summary>
            创建Xml文档的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.addRealNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加实节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的节点名</param>
            <param name="attName">节点的属性</param>
            <param name="attValue">节点的属性值</param>
            <param name="innerText">节点的子文本</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.addRealNode(LibStruct.XmlSign)">
            <summary>
            添加实节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.addEmptyNode(System.String,System.String)">
            <summary>
            添加空节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的空节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.addEmptyNode(LibStruct.XmlSign)">
            <summary>
            添加空节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.removeNode(System.String,System.String)">
            <summary>
            删除被指定的父节点下子节点的方法（重载一）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">被删的子节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.removeNode(LibStruct.XmlSign)">
            <summary>
            删除被指定的父节点下子节点的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:dataUnit.XmlH.readInformation(System.String,System.String)">
            <summary>
            读取被指定的实节点的信息的方法（重载一）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="type">被读取的信息类型</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:dataUnit.XmlH.readInformation(LibStruct.XmlSign)">
            <summary>
            读取被指定的实节点的信息的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:dataUnit.XmlH.readAttribute(System.String,System.String)">
            <summary>
            读取被指定的实节点的属性值的方法（重载一）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="attName">被读值的属性名</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="M:dataUnit.XmlH.readAttribute(LibStruct.XmlSign)">
            <summary>
            读取被指定的实节点的属性值的方法（重载二）
            </summary>
            <param name="XmlSign">Xml文档信息通用结构体</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="T:dataUnit.MySqlConnH">
            <summary>
            MySql数据库管理器
            </summary>
        </member>
        <member name="M:dataUnit.MySqlConnH.closeHConnection">
            <summary>
            close主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.disposeHConnection">
            <summary>
            dispose主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.nullHConnection">
            <summary>
            将主连接设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.restartHConnection">
            <summary>
            重启主连接（须以主连接定义完成为前提）
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.disposeHCommand">
            <summary>
            dispose主命令行
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.nullHCommand">
            <summary>
            将主命令行设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.setHCommand(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            设置主命令行的sql语句（重载一）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="MySqlConnection">要求主命令行执行的MySqlConnection连接实例</param>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.setHCommand(System.String)">
            <summary>
            设置主命令行的sql语句（重载二：HConnection介入）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.start(System.String,System.String,System.String,System.String)">
            <summary>
            启动连接（重载一：HConnection介入）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回true，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.start(LibStruct.MySql.mysqlConn)">
            <summary>
            启动连接（重载二：HConnection介入）
            </summary>
            <param name="mysqlConn">连接签名</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.start(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            启动连接（重载三）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            获得数据行（重载一）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获得数据行（重载二）（适用于参数化查询）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getRow(System.String)">
            <summary>
            获得数据行（重载三：HConnection介入）
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getRow(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获得数据行（重载四：HConnection介入）（适用于参数化查询）
            </summary>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回查询结果</returns>
            
        </member>
        <member name="M:dataUnit.MySqlConnH.getRow(System.Data.DataTable,System.String,System.Object)">
            <summary>
            获得数据行（重载五：通过键值匹配，从数据表中获取数据行）
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="keyName">键名</param>
            <param name="keyValue">键值</param>
            <returns>返回获得的DataRow数据行实例，未检索到返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getConnection(System.String,System.String,System.String,System.String)">
            <summary>
            抛出一个MySql连接（重载一）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getConnection(LibStruct.MySql.mysqlConn)">
            <summary>
            抛出一个MySql连接（重载二）
            </summary>
            <param name="mysqlConn">连接签名</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            获取一张数据表（重载一）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获取一张数据表（重载二）（适用于参数化查询）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getTable(System.String)">
            <summary>
            获取一张数据表（重载三：HConnection介入）
            </summary>
            <param name="sql">SQL语句，用于查询数据表</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getTable(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            获取一张数据表（重载四：HConnection介入）（适用于参数化查询）
            </summary>
            <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getColumn(System.Data.DataTable,System.String)">
            <summary>
            从数据表中提取取数据列
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="columnName">列名</param>
            <returns>返回非泛型List{object}实例，错误则返回null</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.setColumnValue(MySql.Data.MySqlClient.MySqlConnection,LibStruct.MySql.mysqlKey,System.String,System.String)">
            <summary>
            设置(替换)一个键值（键匹配查询）
            </summary>
            <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
            <param name="mysqlKey">定位键</param>
            <param name="keyName">操作于键名</param>
            <param name="keyValue">更改为该键值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.setColumnValue(LibStruct.MySql.mysqlKey,System.String,System.String)">
            <summary>
            设置(替换)一个键值（键匹配查询）
            （重载二：HConnection介入）
            </summary>
            <param name="mysqlKey">定位键</param>
            <param name="keyName">操作于键名</param>
            <param name="keyValue">更改为该键值</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getColumnValue(MySql.Data.MySqlClient.MySqlConnection,LibStruct.MySql.mysqlKey,System.String)">
             <summary>
             获得一个键值（键匹配查询）
            （重载一）
             如果查询到多个行，则只返回第一行的数据
             </summary>
             <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
             <param name="mysqlKey">定位键</param>
             <param name="keyName">键名</param>
             <returns>操作成功返回true</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.getColumnValue(LibStruct.MySql.mysqlKey,System.String)">
            <summary>
            获得一个键值（键匹配查询）
            （重载二：HConnection介入）
            如果查询到多个行，则只返回第一行的数据
            </summary>
            <param name="mysqlKey">定位键</param>
            <param name="keyName">键名</param>
            <returns>操作成功返回true</returns>
        </member>
        <member name="M:dataUnit.MySqlConnH.parmQueryCmd(System.String,System.Collections.Generic.List{LibStruct.MySql.mysqlParm})">
            <summary>
            建立参数化查询cmd对象
            </summary>
            <param name="sql">携带查询参数的SQL语句</param>
            <param name="parmList">查询参数列表</param>
            <returns>返回建立的参数化查询cmd对象</returns>
        </member>
        <member name="T:basicUnit.BasicMethod">
            <summary>
            该类包含编程常用的基本方法
            </summary>
        </member>
        <member name="M:basicUnit.BasicMethod.exch(System.Int32@,System.Int32@)">
            <summary>
            交换值的方法，引用类型
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:basicUnit.BasicMethod.less(System.Int32,System.Int32)">
            <summary>
            比较大小的方法
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:basicUnit.BasicMethod.easySort``1(``0[])">
            <summary>
            冒泡排序
            </summary>
            <param name="array">被排序的数组</param>
            <returns>通常返回有序数组(由小到大)，报错则返回null</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.shellSort(System.Int32[])">
            <summary>
            希尔排序
            </summary>
            <param name="array">待排序的整数组</param>
            <returns>返回排序完成的数组</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.binarySearch(System.Int32,System.Int32[])">
            <summary>
            二分法检索(重载一),适用于整型检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组,顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.binarySearch(System.Double,System.Double[])">
            <summary>
            二分法检索(重载二),适用于双精度浮点检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组，顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.fileToString(System.String)">
            <summary>
            以字符串形式输出文件（重载一）（UTF8编码模式）
            </summary>
            <param name="url">文件所在的本地网络路径</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.fileToString(System.String,System.String)">
            <summary>
            以字符串形式输出文件（重载二）
            </summary>
            <param name="url">文件所在的本地网络路径</param>
            /// <param name="encodingType">解析文件所用的编码模式</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.fileToString(System.String,System.Int32,System.Boolean)">
            <summary>
            以字符串形式输出文件（重载三）（UTF8编码模式）
            </summary>
            <param name="filePath">文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.fileToString(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            以字符串形式输出文件（重载四）
            </summary>
            <param name="filePath">文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
            <param name="encodingType">解析文件所用的编码模式</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.toMD5``1(``0)">
            <summary>
            对象输出到MD5
            </summary>
            <typeparam name="T">待转换对象对应的类型</typeparam>
            <param name="obj">待转换对象</param>
            <returns>返回处理后得到的字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.toSHA1``1(``0)">
            <summary>
            对象输出到SHA1
            </summary>
            <typeparam name="T">待转换对象对应的类型</typeparam>
            <param name="obj">待转换对象</param>
            <returns>返回处理后得到的字符串</returns>
        </member>
        <member name="M:basicUnit.BasicMethod.toSHA256``1(``0)">
            <summary>
            对象输出到SHA256
            </summary>
            <typeparam name="T">待转换对象对应的类型</typeparam>
            <param name="obj">待转换对象</param>
            <returns>返回处理后得到的字符串</returns>
        </member>
        <member name="T:basicUnit.WebMethod">
            <summary>
            该类包含web编程常用的基本方法
            </summary>
        </member>
        <member name="M:basicUnit.WebMethod.isCookiesExist(System.String)">
            <summary>
            判断Cookie对象是否存在
            </summary>
            <param name="CookieName">被判断Cookie对象的名称</param>
            <returns>存在返回true，反之false</returns>
        </member>
        <member name="M:basicUnit.WebMethod.isCookiesExist(System.String,System.String)">
            <summary>
            判断Cookie对象是否存在（重载二：判断索引是否存在）
            </summary>
            <param name="CookieName">被判断Cookie对象的名称</param>
            <param name="keyName">索引名，属于被判断的Cookie</param>
            <returns>存在返回true，反之false</returns>
        </member>
        <member name="M:basicUnit.WebMethod.cookie``1(System.String)">
            <summary>
            读取Cookie对象到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="CookieName">被读取Cookie对象名</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:basicUnit.WebMethod.cookie``1(System.String,System.String)">
            <summary>
            读取Cookie对象的指定索引值到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="CookieName">被读取Cookie对象名</param>
            <param name="keyName">索引名，属于当前Cookie对象</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:basicUnit.WebMethod.setCookie(System.String,System.Object)">
            <summary>
            设置Cookie值
            </summary>
            <param name="CookieName">Cookie名，承担该操作</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="M:basicUnit.WebMethod.setCookie(System.String,System.String,System.Object)">
            <summary>
            设置Cookie值（重载二：索引设置）
            </summary>
            <param name="CookieName">Cookie名，承担该操作</param>
            <param name="keyName">索引名，属于承担该操作的Cookie</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="M:basicUnit.WebMethod.session``1(System.String)">
            <summary>
            读取Session对象到指定类型
            </summary>
            <typeparam name="T">指定泛型</typeparam>
            <param name="varName">变量名，属于Session对象，承担该操作</param>
            <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        </member>
        <member name="M:basicUnit.WebMethod.setSession(System.String,System.Object)">
            <summary>
            设置Session对象的变量值
            </summary>
            <param name="varName">变量名，属于Session对象，承担该操作</param>
            <param name="value">设置值</param>
            <returns>设置成功返回true，反之false</returns>
        </member>
        <member name="T:businessUnit.pilipala.IPaRoot">
            <summary>
            权限接口
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.IPaRoot.dataBase">
            <summary>
            Pala数据表所在数据库
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.IPaRoot.Tables">
            <summary>
            文本表
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.IPaRoot.Views">
            <summary>
            文本视图
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.IPaRoot.MySqlConnH">
            <summary>
            数据库管理器实例
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.PaRoot">
            <summary>
            权限控制器
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.dataBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.objTables">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.objViews">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.MySqlConnH">
            <summary>
            
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.#ctor(System.Int32,LibStruct.pilipala.PaDB)">
            <summary>
            初始化PaRoot
            </summary>
            <parmm name="root_id">权限ID</parmm>
            <parmm name="PaDB">啪啦数据库信息</parmm>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.getRoot">
            <summary>
            获得权限数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:businessUnit.pilipala.PaRoot.dftTables">
            <summary>
            默认pala数据表
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.PaRoot.dftViews">
            <summary>
            默认pala数据视图
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.PaRoot.Tables">
            <summary>
            自定义pala数据表
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.Tables.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化表名结构
            </summary>
            <parmm name="root"></parmm>
            <parmm name="text_index"></parmm>
            <parmm name="text_main"></parmm>
            <parmm name="text_sub"></parmm>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Tables.root">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Tables.text_index">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Tables.text_main">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Tables.text_sub">
            <summary>
            
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.PaRoot.Views">
            <summary>
            自定义pala数据视图
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.Views.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化视图名结构
            </summary>
            <parmm name="text_main"></parmm>
            <parmm name="text_sub"></parmm>
            <parmm name="text_index_post"></parmm>
            <parmm name="text_index_page"></parmm>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Views.text_index">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Views.text_main">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.PaRoot.Views.text_sub">
            <summary>
            
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.defaultTables(businessUnit.pilipala.PaRoot.Tables@)">
            <summary>
            以默认值定义表名（重载一::直接更改Tables）
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.defaultViews(businessUnit.pilipala.PaRoot.Views@)">
            <summary>
            以默认值定义视图名（重载一::直接更改Views）
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.defaultTables">
            <summary>
            以默认值定义表名（重载二::返回默认Tables）
            </summary>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.PaRoot.defaultViews">
            <summary>
            以默认值定义视图名（重载二::返回默认Views）
            </summary>
            <returns></returns>
        </member>
        <member name="T:businessUnit.pilipala.ITextListH">
            <summary>
            文本列表控制接口
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.getTextIDList">
            <summary>
            获得全部文本ID列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.getTextIDList(System.String)">
            <summary>
            获得指定类型的文本ID列表
            </summary>
            <parmm name="text_type">自定义文本类型</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.stepTextIDList(System.Int32,System.Int32)">
            <summary>
            获得全部文本ID列表(步进式)
            </summary>
            <parmm name="start">步进起始行（包含该行）</parmm>
            <parmm name="length">加载行数</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.stepTextIDList(System.Int32,System.Int32,System.String)">
            <summary>
            获得指定类型的文本ID列表(步进式)
            </summary>
            <parmm name="start">步进起始行（包含该行）</parmm>
            <parmm name="length">加载行数</parmm>
            <parmm name="text_type">自定义文本类型</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.matchTextTitle(System.String)">
            <summary>
            文章标题(text_id)匹配器
            </summary>
            <param name="str">匹配文本</param>
            <returns>返回符合匹配文本的text_id集合</returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.matchTextSummary(System.String)">
            <summary>
            文章标题(text_summary)匹配器
            </summary>
            <param name="str">匹配文本</param>
            <returns>返回符合匹配文本的text_id集合</returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextListH.matchTextContent(System.String)">
            <summary>
            文章标题(text_content)匹配器
            </summary>
            <param name="str">匹配文本</param>
            <returns>返回符合匹配文本的text_id集合</returns>
        </member>
        <member name="T:businessUnit.pilipala.ITextH">
            <summary>
            文本控制接口
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.ITextH.getTextMain(System.Int32)">
            <summary>
            获得符合text_id的文本主要数据
            </summary>
            <parmm name="text_id">文本序列号</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextH.getTextSub(System.Int32)">
            <summary>
             获得符合text_id的文本次要数据
            </summary>
            <parmm name="text_id">文本序列号</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextH.nextTextID(System.Int32)">
            <summary>
            取得当前文本 text_id 的下一个文本 text_id
            </summary>
            <parmm name="current_text_id">当前文本序列号</parmm>
            <returns>错误返回 -1</returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextH.prevTextID(System.Int32)">
            <summary>
            取得当前文本 text_id 的上一个文本 text_id
            </summary>
            <parmm name="current_text_id">当前文本序列号</parmm>
            <returns>错误返回 -1</returns>
        </member>
        <member name="M:businessUnit.pilipala.ITextH.rdmTextID(System.Int32,System.String)">
            <summary>
            随机获得文本ID(text_id)
            </summary>
            <parmm name="excluded_text_id">不参与随机操作的文本的text_id</parmm>
            <parmm name="text_type">自定义文本类型</parmm>
            <returns>错误返回 -1</returns>
        </member>
        <member name="T:businessUnit.pilipala.UI.TextListH">
            <summary>
            文本列表控制器
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextListH.dataBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextListH.Tables">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextListH.Views">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextListH.MySqlConnH">
            <summary>
            
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.#ctor(LibStruct.pilipala.PaDB)">
            <summary>
            初始化TextListH
            </summary>
            <parmm name="PaDB">啪啦数据库信息</parmm>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.getTextIDList">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.getTextIDList(System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.stepTextIDList(System.Int32,System.Int32)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.stepTextIDList(System.Int32,System.Int32,System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.getTextMap">
            <summary>
            获得站点地图(由text_id和text_title构成的集合)
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.matchText``1(``0)">
            <summary>
            文章匹配器
            </summary>
            <typeparmm name="T">继承自ITextBasic的类型</typeparmm>
            <parmm name="obj">继承自ITextBasic的对象实例</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.matchTextTitle(System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.matchTextSummary(System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.matchTextContent(System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.getTextIDList_OrderBy(System.String,System.String)">
            <summary>
            获取文章排行(无截止长度)
            </summary>
            <param name="key">键名</param>
            <param name="orderType">asc(升序)或desc(降序)</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextListH.getTextIDList_OrderBy(System.String,System.String,System.Int32)">
            <summary>
            获取热度文章排行(有截止长度)
            </summary>
            <param name="key">键名</param>
            <param name="orderType">asc(升序)或desc(降序)</param>
            <param name="length">截止长度</param>
            <returns></returns>
        </member>
        <member name="T:businessUnit.pilipala.UI.TextH">
            <summary>
            文本控制器
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextH.dataBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextH.Tables">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextH.Views">
            <summary>
            
            </summary>
        </member>
        <member name="P:businessUnit.pilipala.UI.TextH.MySqlConnH">
            <summary>
            
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.#ctor(LibStruct.pilipala.PaDB)">
            <summary>
            初始化TextH
            </summary>
            <parmm name="PaDB">啪啦数据库信息</parmm>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextMain(System.Int32)">
            <summary>
            ITextH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextMain(System.Int32,System.String)">
            <summary>
            取得Main表的一个键值
            </summary>
            <param name="text_id">文章序列号</param>
            <param name="keyName">键名</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextSub(System.Int32)">
            <summary>
            ITextH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextSub(System.Int32,System.String)">
            <summary>
            取得Sub表的一个键值
            </summary>
            <param name="text_id">文章序列号</param>
            <param name="keyName">键名</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextTitle(System.Int32)">
            <summary>
            取得文本标题(text_title)
            </summary>
            <param name="text_id">文本序列号</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextSummary(System.Int32)">
            <summary>
            取得文本概要(text_summary)
            </summary>
            <param name="text_id">文本序列号</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextContent(System.Int32)">
            <summary>
            取得文本正文(text_content)
            </summary>
            <param name="text_id">文本序列号</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextTitle(System.Int32,System.Int32)">
            <summary>
            按长度取得文本标题(text_title)
            </summary>
            <param name="text_id">文本序列号</param>
            <param name="length">取得的文章内容长度</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextSummary(System.Int32,System.Int32)">
            <summary>
            按长度取得文本概要(text_summary)
            </summary>
            <param name="text_id">文本序列号</param>
            <param name="length">取得的文章内容长度</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.getTextContent(System.Int32,System.Int32)">
            <summary>
            按长度取得文本正文(text_content)
            </summary>
            <param name="text_id">文本序列号</param>
            <param name="length">取得的文章内容长度</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.nextTextID(System.Int32)">
            <summary>
            ITextH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.prevTextID(System.Int32)">
            <summary>
            ITextH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.rdmTextID(System.Int32,System.String)">
            <summary>
            ITextH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.updateTextBasic``1(``0)">
            <summary>
            文章更改器
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.updateTextTitle(System.Int32,System.String)">
            <summary>
            更改文章标题(text_title)
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.updateTextSummary(System.Int32,System.String)">
            <summary>
            更改文章概要(text_summary)
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.updateTextContent(System.Int32,System.String)">
            <summary>
            更改文章内容(text_content)
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.update_countPv(System.Int32,System.Int32)">
            <summary>
            设置浏览计数(count_pv)
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.UI.TextH.update_countStar(System.Int32,System.Int32)">
            <summary>
            设置星星计数(count_star)
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.Edit.TextListH">
            <summary>
            文本列表控制器
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextListH.#ctor(LibStruct.pilipala.PaDB)">
            <summary>
            初始化TextListH
            </summary>
            <parmm name="PaDB">啪啦数据库信息</parmm>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextListH.getTextIDList">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextListH.getTextIDList(System.String)">
            <summary>
            ITextListH接口的基础实现，详见其接口注释
            </summary>
        </member>
        <member name="T:businessUnit.pilipala.Edit.TextH">
            <summary>
            文本控制器
            方法注释参见ITextH接口
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.#ctor(LibStruct.pilipala.PaDB)">
            <summary>
            初始化TextH
            </summary>
            <parmm name="PaDB">啪啦数据库信息</parmm>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.getTextMain(System.Int32)">
            <summary>
            获得符合text_id的且在展示文本主要数据，无论展示与否
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.getTextSub(System.Int32)">
            <summary>
            获得符合text_id的且在展示文本次要数据，无论展示与否
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.updateTextBasic``1(``0)">
            <summary>
            文章更改器
            </summary>
            <typeparam name="T">继承自ITextBasic的类型</typeparam>
            <param name="obj">继承自ITextBasic的对象实例</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.updateTextTitle(System.Int32,System.String)">
            <summary>
            更改文章标题(text_title)
            </summary>
            <param name="text_id">文章序列号</param>
            <param name="text_title">新标题</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.updateTextSummary(System.Int32,System.String)">
            <summary>
            更改文章概要(text_summary)
            </summary>
            <param name="text_id">文章序列号</param>
            <param name="text_summary">新概要</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.updateTextContent(System.Int32,System.String)">
            <summary>
            更改文章内容(text_content)
            </summary>
            <param name="text_id">文章序列号</param>
            <param name="text_content">新内容</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.update_countPv(System.Int32,System.Int32)">
            <summary>
            设置浏览计数(count_pv)
            </summary>
            <parmm name="text_id">文本ID</parmm>
            <parmm name="value">值</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.Edit.TextH.update_countStar(System.Int32,System.Int32)">
            <summary>
            设置星星计数(count_star)
            </summary>
            <parmm name="text_id">文本ID</parmm>
            <parmm name="value">值</parmm>
            <returns></returns>
        </member>
        <member name="T:businessUnit.pilipala.PaFn">
            <summary>
            啪啦函数
            </summary>
        </member>
        <member name="M:businessUnit.pilipala.PaFn.fill(LibStruct.pilipala.PaText,LibStruct.pilipala.PaText)">
            <summary>
            合并主副表PaText数据
            </summary>
            <parmm name="TextMain">主表PaText</parmm>
            <parmm name="TextSub">副表PaText</parmm>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.PaFn.htmlFilter(System.String)">
            <summary>
            html过滤器
            </summary>
            <param name="str">待过滤的字符串</param>
            <returns></returns>
        </member>
        <member name="M:businessUnit.pilipala.PaFn.timeFromNow(System.DateTime)">
            <summary>
            距现在字符串生成器
            </summary>
            <param name="dateTime">要计算的时间</param>
            <returns></returns>
        </member>
    </members>
</doc>
