<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StdLibx</name>
    </assembly>
    <members>
        <member name="T:StdLib.LogicHandler.Encryptor">
            <summary>
            加密算法类
            </summary>
        </member>
        <member name="M:StdLib.LogicHandler.Encryptor.md5(System.String)">
            <summary>
            MD5方法
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>通常返回MD5加密结果，报错则返回错误信息</returns>
        </member>
        <member name="M:StdLib.LogicHandler.Encryptor.hash(System.String)">
            <summary>
            散列方法
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>通常返回散列加密结果，报错则返回错误信息</returns>
        </member>
        <member name="T:StdLib.LogicHandler.ArrayAlgorithm">
            <summary>
            矩阵算法类
            </summary>
        </member>
        <member name="F:StdLib.LogicHandler.ArrayAlgorithm.NumArray">
            <summary>
            存放生成的矩阵
            </summary>
        </member>
        <member name="P:StdLib.LogicHandler.ArrayAlgorithm.numArray">
            <summary>
            矩阵的引用访问器
            </summary>
        </member>
        <member name="M:StdLib.LogicHandler.ArrayAlgorithm.getIndex(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            提取矩阵有效信息索引的方法
            </summary>
            <param name="psw">密码(int):共10个整数</param>
            <param name="dic">int[] dic = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };:字典集，一共10个字符</param>
            <param name="num">int[] num = { 8, 4, 5, 5, 5, 3, 7, 9, 2, 9 };:被加密的10个整数</param>
            <returns>通常返回索引数组，报错则返回null</returns>
        </member>
        <member name="T:StdLib.LogicHandler.PixelGraphic">
            <summary>
            PixelGraphic转码类
            </summary>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.dePixels(System.String)">
            <summary>
            PixelGraphic解码方法
            </summary>
            <param name="stream">文件流指定</param>
            <returns>通常返回解码结果，报错则返回"StdLibError ec4580"</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.toPixels(System.String,System.String)">
            <summary>
            PixelGraphic加密方法:(第一重载)注意hex至少由4个16进制字符组成
            </summary>
            <param name="hex">被加密的16进制text(不带空格)</param>
            <param name="stream">bmp模板流</param>
            <returns>通常返回编译后的bmp，报错则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.toPixels(System.Object,System.String,System.String)">
            <summary>
            PixelGraphic加密方法:(第二重载)注意hex至少由4个16进制字符组成
            </summary>
            <param name="obj">被加密的16进制obj:text(不带空格)或者_hex(带空格)或者str[,](hex矩阵)/</param>
            <param name="stream">bmp模板流</param>
            <param name="type"></param>
            <returns>通常返回编译后的bmp，报错则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.de(System.String)">
            <summary>
            解码ANSW图像
            </summary>
            <param name="stream">包含待解码BMP图像的物理路径</param>
            <returns>返回解码后的16进制数据，报错则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.allToBMP(System.Object,System.String,System.String)">
            <summary>
            通过选择根据方式来编译ANSW
            </summary>
            <param name="obj">含有16进制数据的实例</param>
            <param name="stream">初始BMP图片模板的物理路径</param>
            <param name="type">编译类型，可选填项有："hex"（根据不带空格的16进制文本编译ANSW）、"_hex"（根据带有空格的16进制文本编译ANSW）、"array"（根据16进制文本数据矩阵编译ANSW）</param>
            <returns>返回Bitmap实例，错误则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.hexToBMP(System.String,System.String)">
            <summary>
            根据不带空格的16进制文本编译ANSW
            </summary>
            <param name="hex">不带空格的16进制文本</param>
            <param name="stream">初始BMP图片模板的物理路径</param>
            <returns>返回Bitmap实例，错误则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic._hexToBMP(System.String,System.String)">
            <summary>
            根据带有空格的16进制文本编译ANSW
            </summary>
            <param name="_hex">带有空格的16进制文本</param>
            <param name="stream">初始BMP图片模板的物理路径</param>
            <returns>返回Bitmap实例，错误则返回null</returns>
        </member>
        <member name="M:StdLib.LogicHandler.PixelGraphic.arrayToBMP(System.String[0:,0:],System.String)">
            <summary>
            根据16进制文本数据矩阵编译ANSW
            </summary>
            <param name="hexArray">16进制文本数据矩阵</param>
            <param name="stream">初始BMP图片模板的物理路径</param>
            <returns>返回Bitmap实例，错误则返回null</returns>
        </member>
        <member name="T:StdLib.LogicHandler.Sorter">
            <summary>
            排序算法类
            </summary>
        </member>
        <member name="M:StdLib.LogicHandler.Sorter.easySort``1(``0[])">
            <summary>
            排序方法
            </summary>
            <param name="array">被排序的数组</param>
            <returns>通常返回有序数组(由小到大)，报错则返回null</returns>
        </member>
        <member name="T:StdLib.LogicHandler.Searcher">
            <summary>
            检索类
            </summary>
        </member>
        <member name="M:StdLib.LogicHandler.Searcher.binarySearch(System.Int32,System.Int32[])">
            <summary>
            二分法检索(第一重载),适用于整型检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组,顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="M:StdLib.LogicHandler.Searcher.binarySearch(System.Double,System.Double[])">
            <summary>
            二分法检索(第二重载),适用于双精度浮点检索
            </summary>
            <param name="value">被检索值</param>
            <param name="array">数组，顺序由小到大</param>
            <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        </member>
        <member name="T:StdLib.FrameHandler.IStdLibFrame">
            <summary>
            版本控制限定
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.targetFramework">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.targetFrameworkMoniker">
            <summary>
            目标框架名字对象
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.compat">
            <summary>
            对最近一次pub版本的全局兼容性
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.IStdLibFrame.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="T:StdLib.FrameHandler.LibInformation">
            <summary>
            用于获取类库信息的类
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.projectVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.newVerDownloadURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.thisVerDownloadURL">
            <summary>
            当前版本下载URL
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.HlinfURL">
            <summary>
            内置于当前版本的Hlinf信息获取URL
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.logo">
            <summary>
            获取到像素化的StdLib_logo
            </summary>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.#ctor(System.String)">
            <summary>
            初始化LibInformation
            </summary>
            <param name="spareInfUrl">必须的值：用于内置联网信息获取Url失效时进行替补的Url</param>
        </member>
        <member name="T:StdLib.FrameHandler.LibInformation.OWebClient">
            <summary>
            被重写的WebClient
            </summary>
        </member>
        <member name="P:StdLib.FrameHandler.LibInformation.OWebClient.timeOut">
            <summary>
            WebRequest请求访问的超时时间
            </summary>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.OWebClient.GetWebRequest(System.Uri)">
            <summary>
            得到WebRwquest请求实例并附加超时时间的方法
            </summary>
            <param name="uri">统一资源标识符对象</param>
            <returns>返回WebRequests实例(注意！该部分代码尚不安全，因为它没有建立报错处理机制)</returns>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.getStreamReader(System.String)">
            <summary>
            获取url指定的OWebClient所赋值的StreamReader对象
            </summary>
            <param name="url">被OWebClient指定的url</param>
            <returns>返回StreamReader，报错返回null</returns>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.getHtmlLibInformation">
            <summary>
            获取联网信息
            （注意：只要取到了空值，该方法将自动返回自定义URL所取得的信息（第二重载被执行））
            </summary>
            <returns>返回获得的信息，报错返回null</returns>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.getHtmlLibInformation(System.String)">
            <summary>
            获取联网信息（第二重载）
            </summary>
            <param name="url">信息所在的URL地址</param>
            <returns>返回获得的信息，报错返回“string[] { "null", "null" }”数组</returns>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.getJsonLibInformation(System.String)">
             <summary>
             通过json文件获得类库信息（第一重载）
             </summary>
            <param name="url">json文件所在url</param>
             <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="M:StdLib.FrameHandler.LibInformation.getJsonLibInformation(System.String,System.Int32,System.Boolean)">
            <summary>
            通过json文件获得类库信息（第二重载）
            </summary>
            <param name="filePath">json文件所在的本地物理路径</param>
            <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
            <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会将慢于串行调用</param>
            <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        </member>
        <member name="T:StdLib.DataHandler.exeLoader">
            <summary>
            程序启动器
            </summary>
        </member>
        <member name="M:StdLib.DataHandler.exeLoader.run(System.String)">
            <summary>
            第一重载，启动1个应用
            </summary>
            <param name="file1">应用目录</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.exeLoader.run(System.String,System.String)">
            <summary>
            第二重载，启动2个应用
            </summary>
            <param name="file1">应用目录1</param>
            <param name="file2">应用目录2</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="T:StdLib.DataHandler.XmlHandler">
            <summary>
            组标准Xml数据格式读写类
            </summary>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.reStream(System.String)">
            <summary>
            指定流的方法
            </summary>
            <param name="xStream">文件流地址</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.createXml(System.String,System.String,System.String)">
            <summary>
            创建Xml文档的方法（第一重载）
            </summary>
            <param name="fileName">Xml文档被创建的目录</param>
            <param name="xmlName">Xml文档名</param>
            <param name="rootName">根节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.createXml(StdLib.xmlStr)">
            <summary>
            创建Xml文档的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.addRealNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加实节点的方法（第一重载）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的节点名</param>
            <param name="attName">节点的属性</param>
            <param name="attValue">节点的属性值</param>
            <param name="innerText">节点的子文本</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.addRealNode(StdLib.xmlStr)">
            <summary>
            添加实节点的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.addEmptyNode(System.String,System.String)">
            <summary>
            添加空节点的方法（第一重载）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">新建的空节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.addEmptyNode(StdLib.xmlStr)">
            <summary>
            添加空节点的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.removeNode(System.String,System.String)">
            <summary>
            删除被指定的父节点下子节点的方法（第一重载）
            </summary>
            <param name="path">被指定的父节点</param>
            <param name="nodeName">被删的子节点名</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.removeNode(StdLib.xmlStr)">
            <summary>
            删除被指定的父节点下子节点的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.readInformation(System.String,System.String)">
            <summary>
            读取被指定的实节点的信息的方法（第一重载）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="type">被读取的信息类型</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.readInformation(StdLib.xmlStr)">
            <summary>
            读取被指定的实节点的信息的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.readAttribute(System.String,System.String)">
            <summary>
            读取被指定的实节点的属性值的方法（第一重载）
            </summary>
            <param name="path">被指定的实节点</param>
            <param name="attName">被读值的属性名</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.XmlHandler.readAttribute(StdLib.xmlStr)">
            <summary>
            读取被指定的实节点的属性值的方法（第二重载）
            </summary>
            <param name="xmlStr">Xml文档信息通用结构体</param>
            <returns>通常返回被读取属性的值，报错则返回null</returns>
        </member>
        <member name="T:StdLib.DataHandler.MSSqlConnectionHandler">
            <summary>
            MSSql数据库操作类（试行）
            </summary>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HConnection_Close">
            <summary>
            close主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HConnection_Dispose">
            <summary>
            dispose主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HConnection_null">
            <summary>
            将主连接设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HConnection_restart">
            <summary>
            重启主连接（须以主连接定义完成为前提）
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HCommand_Dispose">
            <summary>
            dispose主命令行
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HCommand_null">
            <summary>
            将主命令行设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HCommand_set(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            设置主命令行的sql语句（第一重载）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="SqlConnection">要求主命令行执行的SqlConnection连接实例</param>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.HCommand_set(System.String)">
            <summary>
            设置主命令行的sql语句（第二重载：HConnection介入）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.start(System.String,System.String,System.String,System.String)">
            <summary>
            启动连接（第一重载：HConnection介入）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回true，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.start(StdLib.connStr)">
            <summary>
            启动连接（第二重载：HConnection介入）
            </summary>
            <param name="connStr">用于参与连接数据库的文本结构</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.start(System.Data.SqlClient.SqlConnection)">
            <summary>
            启动连接（第三重载）
            </summary>
            <param name="SqlConnection">SqlConnection连接实例</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.search(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            执行一个查询（第一重载）
            </summary>
            <param name="SqlConnection">SqlConnection连接实例</param>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.search(System.String)">
            <summary>
            执行一个查询（第二重载：HConnection介入）
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果，错误则返回Exception e的文本信息</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getConnection(System.String,System.String,System.String,System.String)">
            <summary>
            抛出一个Sql连接（第一重载）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回一个SqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getConnection(StdLib.connStr)">
            <summary>
            抛出一个Sql连接（第二重载）
            </summary>
            <param name="connStr">用于参与连接数据库的文本结构</param>
            <returns>返回一个SqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取一张数据表（第一重载）
            </summary>
            <param name="SqlConnection">SqlConnection连接实例</param>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getTable(System.String)">
            <summary>
            获取一张数据表（第二重载：HConnection介入）
            </summary>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getColumn(System.Data.DataTable,System.String)">
            <summary>
            获取数据列
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="columnName">列名</param>
            <returns>返回非泛型List{object}实例，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.getRow(System.Data.DataTable,System.String,System.Object)">
            <summary>
            获取数据行
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="primaryKeyName">主键名</param>
            <param name="primaryKey">主键</param>
            <returns>返回获得的DataRow数据行实例，未检索到或错误返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.alterData(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            更改指定行的指定列数据
            </summary>
            <param name="SqlConnection">SqlConnection连接实例</param>
            <param name="dataBaseName">被操作表所在的数据库</param>
            <param name="tableName">被操作表</param>
            <param name="primaryKeyName">作为索引的主键</param>
            <param name="columnName">参与更改任务的列</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.alterData(System.Data.SqlClient.SqlConnection,StdLib.selectStr,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第二重载）
            </summary>
            <param name="SqlConnection">SqlConnection连接实例</param>
            <param name="selectStr">用于定位查询操作对象的文本结构</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.alterData(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第三重载：HConnection介入）
            </summary>
            <param name="dataBaseName">被操作表所在的数据库</param>
            <param name="tableName">被操作表</param>
            <param name="primaryKeyName">作为索引的主键</param>
            <param name="columnName">参与更改任务的列</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MSSqlConnectionHandler.alterData(StdLib.selectStr,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第四重载：HConnection介入）
            </summary>
            <param name="selectStr">用于定位查询操作对象的文本结构</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="T:StdLib.DataHandler.MySqlConnectionHandler">
            <summary>
            MySql数据库操作类
            </summary>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HConnection_Close">
            <summary>
            close主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HConnection_Dispose">
            <summary>
            dispose主连接
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HConnection_null">
            <summary>
            将主连接设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HConnection_restart">
            <summary>
            重启主连接（须以主连接定义完成为前提）
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HCommand_Dispose">
            <summary>
            dispose主命令行
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HCommand_null">
            <summary>
            将主命令行设置为null值
            </summary>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HCommand_set(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            设置主命令行的sql语句（第一重载）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="MySqlConnection">要求主命令行执行的MySqlConnection连接实例</param>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.HCommand_set(System.String)">
            <summary>
            设置主命令行的sql语句（第二重载：HConnection介入）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
            </summary>
            <param name="sql">被设置的sql语句</param>
            <returns>成功返回ture，反之或报错返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.start(System.String,System.String,System.String,System.String)">
            <summary>
            启动连接（第一重载：HConnection介入）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回true，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.start(StdLib.connStr)">
            <summary>
            启动连接（第二重载：HConnection介入）
            </summary>
            <param name="connStr">用于参与连接数据库的文本结构</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.start(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            启动连接（第三重载）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <returns>返回true，错误则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.search(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            执行一个查询（第一重载）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.search(System.String)">
            <summary>
            执行一个查询（第二重载：HConnection介入）
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果，错误则返回Exception e的文本信息</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getConnection(System.String,System.String,System.String,System.String)">
            <summary>
            抛出一个MySql连接（第一重载）
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getConnection(StdLib.connStr)">
            <summary>
            抛出一个MySql连接（第二重载）
            </summary>
            <param name="connStr">用于参与连接数据库的文本结构</param>
            <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getTable(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            获取一张数据表（第一重载）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getTable(System.String)">
            <summary>
            获取一张数据表（第二重载：HConnection介入）
            </summary>
            <param name="sql">用于查询数据表的SQL语句</param>
            <returns>返回一个DataTable对象，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getColumn(System.Data.DataTable,System.String)">
            <summary>
            获取数据列
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="columnName">列名</param>
            <returns>返回非泛型List{object}实例，错误则返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.getRow(System.Data.DataTable,System.String,System.Object)">
            <summary>
            获取数据行
            </summary>
            <param name="DataTable">数据表实例</param>
            <param name="primaryKeyName">主键名</param>
            <param name="primaryKey">主键</param>
            <returns>返回获得的DataRow数据行实例，未检索到或错误返回null</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.alterData(MySql.Data.MySqlClient.MySqlConnection,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            更改指定行的指定列数据
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="dataBaseName">被操作表所在的数据库</param>
            <param name="tableName">被操作表</param>
            <param name="primaryKeyName">作为索引的主键</param>
            <param name="columnName">参与更改任务的列</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.alterData(MySql.Data.MySqlClient.MySqlConnection,StdLib.selectStr,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第二重载）
            </summary>
            <param name="MySqlConnection">MySqlConnection连接实例</param>
            <param name="selectStr">用于定位查询操作对象的文本结构</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.alterData(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第三重载：HConnection介入）
            </summary>
            <param name="dataBaseName">被操作表所在的数据库</param>
            <param name="tableName">被操作表</param>
            <param name="primaryKeyName">作为索引的主键</param>
            <param name="columnName">参与更改任务的列</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="M:StdLib.DataHandler.MySqlConnectionHandler.alterData(StdLib.selectStr,System.String,System.String)">
            <summary>
            更改指定行的指定列数据（第四重载：HConnection介入）
            </summary>
            <param name="selectStr">用于定位查询操作对象的文本结构</param>
            <param name="primaryKeyValue">被操作行的主键键值</param>
            <param name="value">被操作行的被操作列所要添加的值</param>
            <returns>执行成功返回true，报错则返回false</returns>
        </member>
        <member name="T:StdLib.ViewHandler.WebSite.Post">
            <summary>
            文章处理及输出控制类
            </summary>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.#ctor(StdLib.DataHandler.MySqlConnectionHandler)">
            <summary>
            初始化Post对象（第一构造重载）
            </summary>
            <param name="MySqlConnectionHandler">用于获取Post信息的MySqlConnectionHandler实例</param>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.#ctor(StdLib.connStr)">
            <summary>
            初始化Post对象（第二构造重载）
            </summary>
            <param name="connStr">用于创建Post实例的数据库连接文本结构体</param>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.getData(System.String)">
            <summary>
            获取文章信息
            </summary>
            <param name="postTableName">用于存储文章的数据表</param>
            <returns>返回带有文章信息的非泛型集合类，报错则返回null</returns>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.showPostTitle(System.Collections.Generic.List{StdLib.postData},System.Int32)">
            <summary>
            根据ID输出文章标题
            </summary>
            <param name="LstPd">带有文章信息的非泛型集合类</param>
            <param name="post_ID">文章ID</param>
            <returns>返回文章标题，报错则返回null</returns>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.showPostSummary(System.Collections.Generic.List{StdLib.postData},System.Int32)">
            <summary>
            根据ID输出文章概要
            </summary>
            <param name="LstPd">带有文章信息的非泛型集合类</param>
            <param name="post_ID">文章ID</param>
            <returns>返回文章概要，报错则返回null</returns>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.showPostContent(System.Collections.Generic.List{StdLib.postData},System.Int32)">
            <summary>
            根据ID输出文章内容
            </summary>
            <param name="LstPd">带有文章信息的非泛型集合类</param>
            <param name="post_ID">文章ID</param>
            <returns>返回文章内容，报错则返回null</returns>
        </member>
        <member name="M:StdLib.ViewHandler.WebSite.Post.showCoverLink(System.Collections.Generic.List{StdLib.postData},System.Int32)">
            <summary>
            根据ID输出文章封面链接
            </summary>
            <param name="LstPd">带有文章信息的非泛型集合类</param>
            <param name="post_ID">文章ID</param>
            <returns>返回文章封面链接，报错则返回null</returns>
        </member>
        <member name="T:StdLib.connStr">
            <summary>
            用于参与连接数据库的文本结构
            </summary>
        </member>
        <member name="P:StdLib.connStr.dataSource">
            <summary>
            被连接的数据源
            </summary>
        </member>
        <member name="P:StdLib.connStr.port">
            <summary>
            被连接的端口
            </summary>
        </member>
        <member name="P:StdLib.connStr.userName">
            <summary>
            连接所使用的用户名
            </summary>
        </member>
        <member name="P:StdLib.connStr.password">
            <summary>
            连接所使用的密码
            </summary>
        </member>
        <member name="T:StdLib.xmlStr">
            <summary>
            用于判定Xml输出类型的结构体
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.path">
            <summary>
            节点地址，如父节点、实节点、子节点的地址，用于XmlCreater类中除reStream、CreateXml方法外的所有方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.fileName">
            <summary>
            被创建的Xml文档的文件地址，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.xmlName">
            <summary>
            被创建的Xml文档的文件名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.rootName">
            <summary>
            被创建的Xml文档的根元素名，用于XmlCreater类的CreateXml方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.nodeName">
            <summary>
            节点名，可表示子节点、父节点、新建空\实节点名，用于XmlCreater类的AddRealNode、AddEmptyNode、RemoveNode方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.attName">
            <summary>
            节点的属性名，用于XmlCreater类的AddRealNode、ReadAtt方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.attValue">
            <summary>
            节点的属性值，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.innerText">
            <summary>
            节点的子文本，用于XmlCreater类的AddRealNode方法
            </summary>
        </member>
        <member name="P:StdLib.xmlStr.type">
            <summary>
            读取类型，可选值有"_name"、"_value"，用于XmlCreater类的ReadNode方法
            </summary>
        </member>
        <member name="T:StdLib.selectStr">
            <summary>
            用于定位查询操作对象的文本结构
            </summary>
        </member>
        <member name="P:StdLib.selectStr.dataBaseName">
            <summary>
            被操作表所在的数据库
            </summary>
        </member>
        <member name="P:StdLib.selectStr.tableName">
            <summary>
            被操作表
            </summary>
        </member>
        <member name="P:StdLib.selectStr.primaryKeyName">
            <summary>
            作为索引的主键
            </summary>
        </member>
        <member name="P:StdLib.selectStr.columnName">
            <summary>
            参与更改任务的列         
            </summary>
        </member>
        <member name="T:StdLib.postData">
            <summary>
            用于存储文章概要信息的结构体
            </summary>
        </member>
        <member name="P:StdLib.postData.post_ID">
            <summary>
            文章ID
            </summary>
        </member>
        <member name="P:StdLib.postData.post_title">
            <summary>
            文章标题
            </summary>
        </member>
        <member name="P:StdLib.postData.post_summary">
            <summary>
            文章概要
            </summary>
        </member>
        <member name="P:StdLib.postData.post_content">
            <summary>
            文章内容
            </summary>
        </member>
        <member name="P:StdLib.postData.cover_link">
            <summary>
            封面图片url链接
            </summary>
        </member>
        <member name="T:StdLib.JlinfObject">
            <summary>
            用于为通过联网Json获取StdLib信息的类
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.projectVer">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.projectMoniker">
            <summary>
            版本名字对象
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.editionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.stepping">
            <summary>
            步进
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.targetFramework">
            <summary>
            类库的目标框架
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.targetFrameworkMoniker">
            <summary>
            类库的目标框架名字对象
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.compat">
            <summary>
            针对最近一次发行版的全局兼容性
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.platform">
            <summary>
            适用平台
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.architecture">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.developmentCode">
            <summary>
            开发代号
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.summary">
            <summary>
            版本概要
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.isNewVer">
            <summary>
            是否为最新pub版本
            </summary>
        </member>
        <member name="P:StdLib.JlinfObject.newVerURL">
            <summary>
            最新pub版本下载URL
            </summary>
        </member>
        <member name="T:StdLibx.Resource1">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:StdLibx.Resource1.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:StdLibx.Resource1.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:StdLibx.Resource1.StdLib_logo">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
    </members>
</doc>
